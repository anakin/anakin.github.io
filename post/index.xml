<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anakin- 奔向NB的生活</title>
    <link>http://anakin.github.io/post/</link>
    <description>Recent content in Posts on Anakin- 奔向NB的生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Jun 2021 17:06:12 +0800</lastBuildDate><atom:link href="http://anakin.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create AWS Vpc and Ec2 via Terraform</title>
      <link>http://anakin.github.io/post/terraform-create-vpc-ec2/</link>
      <pubDate>Tue, 08 Jun 2021 17:06:12 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/terraform-create-vpc-ec2/</guid>
      <description>What we will do  Create new VPC Create an Internet Gateway and a NAT gateway Define subnets Create security group Create EC2 instance Integration with gitlab CI  Define terraform file We will create few .tf files:
 backend.tf for integration with gitlab CI, we need save state file on AWS S3 bucket, otherwise Terraform will create resources every time we run CI pipeline.  terraform { backend &amp;quot;s3&amp;quot; { key = &amp;quot;terraform-pipeline/terraform.</description>
    </item>
    
    <item>
      <title>How to Develop DynamoDB Locally</title>
      <link>http://anakin.github.io/post/develop-dynamodb-locally/</link>
      <pubDate>Fri, 04 Jun 2021 08:17:59 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/develop-dynamodb-locally/</guid>
      <description>Download DynamoDB wget https://s3.ap-southeast-1.amazonaws.com/dynamodb-local-singapore/dynamodb_local_latest.tar.gz Extract file tar zxvf dynamodb_local_latest.tar.gz Start Dynamo DB locally We can start Dynamo DB service with docker or with JAVA.
 start with docker  edit docker-compose.yml
version: &#39;3.8&#39; services: dynamodb-local: command: &amp;quot;-jar DynamoDBLocal.jar -sharedDb -optimizeDbBeforeStartup -dbPath ./data&amp;quot; image: &amp;quot;amazon/dynamodb-local:latest&amp;quot; container_name: dynamodb-local ports: - &amp;quot;8000:8000&amp;quot; volumes: - &amp;quot;./docker/dynamodb:/home/dynamodblocal/data&amp;quot; working_dir: /home/dynamodblocal start container
docker-compose up -d start with JAVA directly  java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb Create fake aws credential  edit .</description>
    </item>
    
    <item>
      <title>Using Aws Documentdb With Golang</title>
      <link>http://anakin.github.io/post/using-aws-documentdb-with-golang/</link>
      <pubDate>Wed, 26 May 2021 15:23:15 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/using-aws-documentdb-with-golang/</guid>
      <description>Background AWS Document DB是基本兼容Mongo DB的AWS服务，Mongo DB是比较流行的非结构化文档数据库。使用Golang操作Document DB的方法</description>
    </item>
    
    <item>
      <title>Gitlab Pipeline Trigger</title>
      <link>http://anakin.github.io/post/gitlab-pipeline-trigger/</link>
      <pubDate>Wed, 19 May 2021 16:02:36 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/gitlab-pipeline-trigger/</guid>
      <description>使用Gitlab作为CI/CD工具，有的情况下需要从一个项目中触发两一个项目的pipeline，例如这样的场景：Project A是某个服务，</description>
    </item>
    
    <item>
      <title>Php Call Lambda function through Cloudmap</title>
      <link>http://anakin.github.io/post/php-call-lambda-cloudmap/</link>
      <pubDate>Tue, 18 May 2021 17:48:23 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/php-call-lambda-cloudmap/</guid>
      <description>Cloudmap是AWS的服务发现工具，假设我们已经有一个开发好的Lambda function，并且注册到了Cloudmap中，我们需要从P</description>
    </item>
    
    <item>
      <title>Oauth2 Authcode Logic</title>
      <link>http://anakin.github.io/post/oauth2-authcode-logic/</link>
      <pubDate>Mon, 17 May 2021 13:58:58 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/oauth2-authcode-logic/</guid>
      <description>Oauth2协议中，authcode也就是授权码模式的逻辑是需要用户参与的授权方式。它的步骤如下： （A）用户访问客户端，后者将前者导向认证服</description>
    </item>
    
    <item>
      <title>How to install mysql client on AWS ECS task</title>
      <link>http://anakin.github.io/post/mysql-client-on-ecs/</link>
      <pubDate>Mon, 17 May 2021 13:12:45 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/mysql-client-on-ecs/</guid>
      <description>If we need to install MySQL client on an AWS ECS task, Here is the steps:
 install wget  apt install wget install MySQL client  wget [https://dev.mysql.com/get/mysql-apt-config_0.8.16-1_all.deb](https://dev.mysql.com/get/mysql-apt-config_0.8.16-1_all.deb) apt install lsb-release gnupg -y dpkg -i mysql-apt-config_0.8.16-1_all.deb apt update apt install mysql-client -y when connect to MySQL server add param:  --ssl-mode=DISABLED </description>
    </item>
    
    <item>
      <title>在kubernetes上部署Go Micro代码(一)</title>
      <link>http://anakin.github.io/post/go-micro-k8s-1/</link>
      <pubDate>Sat, 03 Aug 2019 22:30:44 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/go-micro-k8s-1/</guid>
      <description>环境准备 用kubeadm安装好kubernetes环境，我用的测试环境是单节点的，master node和worker node部署在同一台机器</description>
    </item>
    
    <item>
      <title>php的Yaf框架类加载顺序研究</title>
      <link>http://anakin.github.io/post/php-yaf-library/</link>
      <pubDate>Fri, 14 Jun 2019 09:22:14 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/php-yaf-library/</guid>
      <description>代码 注册ini设置到global_library变量（yaf.c） STD_PHP_INI_ENTRY(&amp;quot;yaf.library&amp;quot;, &amp;quot;&amp;quot;, PHP_INI_ALL, OnUpdateString, global_library, zend_yaf_globals, yaf_globals) 把global_library和local_library都</description>
    </item>
    
    <item>
      <title>Docker部署完整的PHP-RPC-Golang环境</title>
      <link>http://anakin.github.io/post/docker-golang-php/</link>
      <pubDate>Fri, 31 May 2019 21:30:05 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/docker-golang-php/</guid>
      <description>完全基于docker部署一个php通过rpc访问golang的环境。 基本架构 我们用PHP的Laravel框架来实现一个用户登录的Restfu</description>
    </item>
    
    <item>
      <title>Laravel整合gRPC</title>
      <link>http://anakin.github.io/post/php-laravel-grpc/</link>
      <pubDate>Fri, 31 May 2019 12:58:45 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/php-laravel-grpc/</guid>
      <description>最近需要用Laravel实现一个Rest的API，后端调用Golang的RPC服务，记录一下整合的过程。 环境准备 php安装grpc和prot</description>
    </item>
    
    <item>
      <title>Gokit创建微服务的例子(翻译)</title>
      <link>http://anakin.github.io/post/gokit-example/</link>
      <pubDate>Mon, 27 May 2019 23:14:16 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/gokit-example/</guid>
      <description>第一原理 让我们创建一个Go kit 服务，我们暂时只用一个main.go文件。你的事务逻辑 你的服务从你的事务逻辑开始。在Go kit里，我们用一个in</description>
    </item>
    
    <item>
      <title>手动搭建kubernetes集群（四）</title>
      <link>http://anakin.github.io/post/create-k8s-4/</link>
      <pubDate>Thu, 23 May 2019 10:24:06 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/create-k8s-4/</guid>
      <description>开始改造我们之前搭建的基础集群，加上安全机制。 准备工作 1. 停止master节点的所有服务查看已有的service kubectl get services 删除service（例如</description>
    </item>
    
    <item>
      <title>Golang通过ETCD实现分布式锁</title>
      <link>http://anakin.github.io/post/golang-etcd-lock/</link>
      <pubDate>Wed, 22 May 2019 16:09:11 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/golang-etcd-lock/</guid>
      <description>之前写过用redis实现的分布式锁，这次用etcd来实现一个。 原理 首先获取一个etcd的租约，拿着这个租约用etcd的事务操作去设置一个ke</description>
    </item>
    
    <item>
      <title>给Mac上的Fusion虚拟机设置固定ip地址</title>
      <link>http://anakin.github.io/post/fusion-static-ip/</link>
      <pubDate>Tue, 21 May 2019 18:11:37 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/fusion-static-ip/</guid>
      <description>因为最近需要安装k8s的本地测试环境，所以使用Mac上的Vmware Fusion安装了几台ubuntu系统的虚拟机，某次重启的时候发现ssh</description>
    </item>
    
    <item>
      <title>手动搭建kubernetes集群（三）</title>
      <link>http://anakin.github.io/post/create-k8s-3/</link>
      <pubDate>Tue, 21 May 2019 16:46:07 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/create-k8s-3/</guid>
      <description>本文是这个系列的第三篇文章，前两篇记录了搭建一个k8s集群的过程，但是之前搭建好的集群少了很重要的一个部分，就是安全相关的功能，包括认证、授</description>
    </item>
    
    <item>
      <title>手动搭建kubernetes集群（二）</title>
      <link>http://anakin.github.io/post/create-k8s-2/</link>
      <pubDate>Mon, 20 May 2019 15:18:19 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/create-k8s-2/</guid>
      <description>根据前文准备好的环境，我们现在来一步步的搭建一个基础的k8s集群注意，这里的配置信息都是按照我自己的虚拟环境来写的。把server01作为m</description>
    </item>
    
    <item>
      <title>手动搭建kubernetes集群（一）</title>
      <link>http://anakin.github.io/post/create-k8s/</link>
      <pubDate>Mon, 20 May 2019 10:57:16 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/create-k8s/</guid>
      <description>最近在看有关k8s的一些知识，想手动搭建一套环境来体验一下，本文详细记录一下搭建的过程。 环境 三台Ubuntu系统的虚拟机，其中一台作为mas</description>
    </item>
    
    <item>
      <title>Etcd实现MVCC的原理</title>
      <link>http://anakin.github.io/post/etcd-mvcc/</link>
      <pubDate>Sun, 19 May 2019 22:52:01 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/etcd-mvcc/</guid>
      <description>etcd满足的是CAP理论中的CP，实现了最终的强一致，使用Raft协议，Quorum机制（大多数同意原则）, MVCC的意思 Multi-Version Concurrency Control 多版本并发</description>
    </item>
    
    <item>
      <title>Redis持久化</title>
      <link>http://anakin.github.io/post/redis-rdb-aof/</link>
      <pubDate>Fri, 17 May 2019 13:22:22 +0800</pubDate>
      
      <guid>http://anakin.github.io/post/redis-rdb-aof/</guid>
      <description>redis的持久化有两种方式，RDB和AOF RDB: 在指定的时间间隔内，执行指定次数的写操作，则会将内存中的数据写入到磁盘中。即在指定目录下生成一</description>
    </item>
    
  </channel>
</rss>
